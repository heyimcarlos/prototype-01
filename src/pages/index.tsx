import type { NextPage } from "next";
import Head from "next/head";
import Map from "@/components/Map";
import { useLocalStorage } from "usehooks-ts";
import { useJsApiLoader } from "@react-google-maps/api";
import { GetServerSidePropsContext } from "next";
import { env } from "@/env/client.mjs";
import { prisma } from "@/server/db/client";
import { inferSSRProps } from "@/lib/types/inferSSRProps";
import MapTopbar from "@/components/MapTopbar";

// Google Maps Library
type GOOGLE_LIBRARIES = "drawing" | "geometry" | "localContext" | "places" | "visualization";
export const GOOGLE_MAP_LIBRARIES = ["places"] as GOOGLE_LIBRARIES[];

// Map Preferences
export const availablePreferences = ["work", "pharmacy", "market"] as const;
export type PreferenceValue = { address: string; lat: number; lng: number };
export type PreferenceKey = typeof availablePreferences[number];
export type PreferenceObj = {
  [key in PreferenceKey]?: PreferenceValue;
};

const Home: NextPage<inferSSRProps<typeof getServerSideProps>> = ({ listings }) => {
  const { isLoaded } = useJsApiLoader({
    googleMapsApiKey: env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,
    libraries: GOOGLE_MAP_LIBRARIES,
  });

  const [pref, setPref] = useLocalStorage<PreferenceObj>("preferences", {});

  if (!isLoaded) return <div>Loading...</div>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-full h-[calc(100vh-48px)]">
        <div className="h-12 border-2 border-solid flex items-center">
          <input placeholder="Search Place" className="rounded border border-solid mx-2 p-1" />
          <button className="border p-1 mx-2 rounded">Search</button>
        </div>
        <MapTopbar setPref={setPref} pref={pref} />
        <Map listings={listings} pref={pref} />
      </main>
    </>
  );
};
// @INFO: Server side fetching of listings
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const getServerSideProps = async ({}: GetServerSidePropsContext) => {
  const listings = await prisma.place.findMany({
    include: {
      center: true,
      listing: {
        include: {
          location: true,
        },
      },
    },
  });

  if (!listings.length) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      listings,
    },
  };
};

export default Home;
