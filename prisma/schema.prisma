generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int                @id @default(autoincrement())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  avatar        String?
  role          UserPermissionRole @default(USER)
  plan          UserPlan           @default(FREE)
  bio           String?
  locale        String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ListingLocation {
  id               Int                       @id @default(autoincrement())
  name             String
  city             String
  state            String
  country          String
  lat              String
  lng              String
  formattedAddress String
  googlePlaceId    String                    @unique
  neighborhood     Neighborhood?             @relation(fields: neighborhoodId, references: [id])
  neighborhoodId   Int?
  listings         Listing[]
  status           ListingLocationStatus     @default(PUBLISHED)
  visibility       ListingLocationVisibility @default(PUBLIC)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
}

model Neighborhood {
  id               Int               @id @default(autoincrement())
  name             String
  slug             String            @unique
  bounds           Json
  lat              String
  lng              String
  listingLocations ListingLocation[]
  status           Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Listing {
  id                Int               @id @default(autoincrement())
  name              String
  slug              String            
  bio               String
  price             Int
  currency          Currency          @default(DOP)
  bedrooms          Int
  fullBathrooms     Int
  halfBathrooms     Int
  squareFeet        Int
  listingType       ListingType
  propertyType      PropertyType
  listingLocation   ListingLocation   @relation(fields: [listingLocationId], references: [id])
  listingLocationId Int
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  listingDetail     ListingDetail?    @relation(fields: [listingDetailId], references: [id])
  listingDetailId   Int?              @unique
  status            ListingStatus     @default(ARCHIVED)
  visibility        ListingVisibility @default(PUBLIC)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum ListingVisibility {
  PUBLIC
  HIDDEN
}

enum ListingStatus {
  PUBLISHED
  ARCHIVED
}

enum ListingLocationVisibility {
  PUBLIC
  HIDDEN
}

enum ListingLocationStatus {
  PUBLISHED
  ARCHIVED
}

model ListingDetail {
  id                Int      @id @default(autoincrement())
  listing           Listing?
  yearBuilt         Int?
  yearRemodeled     Int?
  lotSquareFeet     Int?
  interiorAmenities Json?
  exteriorAmenities Json?
  buildingAmenities Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum PropertyType {
  HOUSE
  APARTMENT
  TOWNHOUSE
  WAREHOUSE
  COMMERCIAL
  LAND
  OTHER
}

enum ListingType {
  RENT
  SALE
}

enum Currency {
  DOP
  USD
}

enum UserPermissionRole {
  USER
  ADMIN
}

enum UserPlan {
  FREE
  TRIAL
  PRO
}
