// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    listing       Listing[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Place {
    id           String        @id @default(cuid())
    name         String
    slug         String        @unique
    borderCoords Coordinates[]
    brderCoords  Json          @db.Json
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    listing      Listing[]
}

model Coordinates {
    id        String    @id @default(cuid())
    latitude  Float
    longitude Float
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    place     Place     @relation(fields: [placeId], references: [id])
    placeId   String
    listing   Listing[]
}

model Listing {
    id            String      @id @default(cuid())
    name          String
    slug          String      @unique
    description   String
    price         Int
    currency      String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    place         Place       @relation(fields: [placeId], references: [id])
    placeId       String
    coordinates   Coordinates @relation(fields: [coordinatesId], references: [id])
    coordinatesId String
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    // ListingImage     ListingImage[]
    // ListingReview    ListingReview[]
    // ListingAmenities ListingAmenities[]
}
